二 表达式计算

//1+3*5
char buf[1024];

第一步:
创建两个栈 operand_stack,operator_stack

第二 :
扫描表达式

操作数入栈的规则:直接入栈
push_stack(operator_stack,*p - '0');

运算符入栈的规则:
1.栈为空
2.当前运算符level > 栈顶运算符 level

提示:
int get_level(char operator)
{
	switch(operator)
	{
	case '+':
	case '-':
		return 1;
	case '*':
	case '/':
		return 2;

	defalut:
		printf("Invalid operator : %c.\n",operator);
		return -1;
	}
}

注意:
1.如果不满足运算符入栈的条件,就计算，一直到满足入栈条件为止

int compute(LinkStack *opd_s,LinkStack *opt_s)
{
	int data,data1,data2;

	switch(pop_stack(opts))
	{
	case '+':
		data2 = pop_stack(opd_s);
		data1 = pop_stack(opd_s);
		data = data1 + data2;
		push_stack(data,opd_s);
		break;
		.....
	}
}

2.扫描结束的时候，需要判断运算符的栈是否为空
  不为空则计算

最后的结果放在操作数的栈

